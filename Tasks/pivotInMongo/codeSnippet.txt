        // Combine groupFields and pivotFields
        List<String> allGroupFields = Stream.concat(groupFields.stream(), pivotFields.stream())
                                            .collect(Collectors.toList());

        // Construct the _id for $group
        Fields groupIdFields = Fields.from(
            allGroupFields.stream()
                .map(field -> Fields.field(field.replace(".", "_"), "$" + field))
                .toArray(Fields.Field[]::new)
        );

        // Create GroupOperation
        GroupOperation groupOperation = Aggregation.group(groupIdFields);

        // Add sum operations for valueFields
        for (String valueField : valueFields) {
            groupOperation = groupOperation.sum(valueField).as("sum_" + valueField);
        }


// Combine groupFields and pivotFields
        List<String> allGroupFields = Stream.concat(groupFields.stream(), pivotFields.stream())
                                            .collect(Collectors.toList());

        // Build the dynamic _id for $group using field names
        GroupOperation groupOperation = Aggregation.group(
            allGroupFields.stream()
                .map(field -> field.replace(".", "_")) // Sanitize field names
                .toArray(String[]::new)
        );

        // Add sum operations for valueFields
        for (String valueField : valueFields) {
            groupOperation = groupOperation.sum(valueField).as("sum_" + valueField);
        }



// Start by combining groupFields and pivotFields
Fields groupIdFields = Fields.from(
    Stream.concat(
        groupFields.stream().map(field -> Fields.field(field, "$" + field)), // Group fields
        pivotFields.stream().map(field -> Fields.field(field, "$" + field))  // Pivot fields
    ).toArray(Fields.Field[]::new) // Maintain correct order
);




import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.GroupOperation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperators;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.bson.Document;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class MongoAggregation {
    private final MongoTemplate mongoTemplate;

    public MongoAggregation(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public void performAggregation() {
        List<String> groupFields = List.of("type", "benefitsReportingLevel", "state", "rag"); // Example list of group fields
        List<String> pivotFields = List.of("state", "rag"); // Example list of pivot fields
        List<String> valueFields = List.of("forecastTotalCostNextYear", "totalCostNextYear"); // Example list of value fields

        // Constructing the _id field using streams
        Document idFields = new Document();
        idFields.putAll(
            Stream.concat(groupFields.stream(), pivotFields.stream())
                .collect(Collectors.toMap(field -> field, field -> "$" + field))
        );

        // Initialize the group operation
        GroupOperation groupStage = Aggregation.group(idFields);

        // Add sum fields dynamically for value fields using streams
        for (String valueField : valueFields) {
            groupStage = groupStage.sum("$" + valueField).as("sum_" + valueField);
        }

        // Add the group stage to aggregation pipeline
        List<AggregationOperation> aggOps = new ArrayList<>();
        aggOps.add(groupStage);

        // Aggregation Pipeline
        Aggregation aggregation = Aggregation.newAggregation(aggOps);

        AggregationResults<Document> results = mongoTemplate.aggregate(aggregation, "yourCollectionName", Document.class);

        for (Document result : results) {
            System.out.println(result.toJson());
        }
    }
}




    public static List<AggregationOperation> convertDocumentsToAggregationOperations(List<Document> documents) {
        List<AggregationOperation> aggOps = new ArrayList<>();

        for (Document document : documents) {
            aggOps.add(new AggregationOperation() {
                @Override
                public Document toDocument(AggregationOperationContext context) {
                    return document;
                }
            });
        }
        return aggOps;
    }

